#
# $Header: /home/rcitton/CVS/vagrant_dg-2.0.1/Vagrantfile,v 2.0.1.15 2019/11/19 08:42:54 rcitton Exp $
#
# LICENSE UPL 1.0
#
# Copyright (c) 1982-2019 Oracle and/or its affiliates. All rights reserved.
#
#    NAME
#      vagrantfile
#
#    DESCRIPTION
#      Creates two nodes Vagrant virtual machines configured with Oracle Data Guard
#
#    NOTES
#       DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
#    AUTHOR
#       ruggero.citton@oracle.com
#
#    MODIFIED   (MM/DD/YY)
#    rcitton     12/21/19 - vm2 u01 check fix
#    rcitton     11/15/18 - Creation
# 
#    REVISION
#    20191119 - $Revision: 2.0.1.15 $
#
#
  
### -------------------------------------------------------------------
### Disclaimer:
###
### EXCEPT WHERE EXPRESSLY PROVIDED OTHERWISE, THE INFORMATION, SOFTWARE,
### PROVIDED ON AN \"AS IS\" AND \"AS AVAILABLE\" BASIS. ORACLE EXPRESSLY DISCLAIMS
### ALL WARRANTIES OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT
### LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
### PURPOSE AND NON-INFRINGEMENT. ORACLE MAKES NO WARRANTY THAT: (A) THE RESULTS
### THAT MAY BE OBTAINED FROM THE USE OF THE SOFTWARE WILL BE ACCURATE OR
### RELIABLE; OR (B) THE INFORMATION, OR OTHER MATERIAL OBTAINED WILL MEET YOUR
### EXPECTATIONS. ANY CONTENT, MATERIALS, INFORMATION OR SOFTWARE DOWNLOADED OR
### OTHERWISE OBTAINED IS DONE AT YOUR OWN DISCRETION AND RISK. ORACLE SHALL HAVE
### NO RESPONSIBILITY FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA THAT
### RESULTS FROM THE DOWNLOAD OF ANY CONTENT, MATERIALS, INFORMATION OR SOFTWARE.
###
### ORACLE RESERVES THE RIGHT TO MAKE CHANGES OR UPDATES TO THE SOFTWARE AT ANY
### TIME WITHOUT NOTICE.
###
### Limitation of Liability:
###
### IN NO EVENT SHALL ORACLE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
### SPECIAL OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOSS OF PROFITS, REVENUE,
### DATA OR USE, INCURRED BY YOU OR ANY THIRD PARTY, WHETHER IN AN ACTION IN
### CONTRACT OR TORT, ARISING FROM YOUR ACCESS TO, OR USE OF, THE SOFTWARE.
### -------------------------------------------------------------------
### This script is NOT supported by Oracle World Wide Technical Support. 
### The script has been tested and appears to work as intended. 
### -------------------------------------------------------------------

# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'
require 'ipaddr'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Costant (ol7_latest default disks number + u01)
# -----------------------------------------------------------------
box_disks_num = 2
# -----------------------------------------------------------------

# Variables
# -----------------------------------------------------------------
params = YAML.load_file 'config/vagrant.yml'
var_box             = params['env']['box']
var_url             = params['env']['url']
#
var_prefix_name     = params['env']['prefix_name']
var_group           = "/" + var_prefix_name
#
var_non_rotational  = params['env']['non_rotational']
var_dns_public_ip   = params['env']['dns_public_ip']
#                   
var_vm1_name        = params['node1']['vm_name']
var_vm1_name = var_prefix_name + "-" + var_vm1_name
#
var_vm1_mem_size    = params['node1']['mem_size']
var_vm1_cpus        = params['node1']['cpus']
var_vm1_public_ip   = params['node1']['public_ip']
var_vm1_private_ip  = params['node1']['private_ip']
var_vm1_u01_disk    = params['node1']['u01_disk']
#                   
var_vm2_name        = params['node2']['vm_name']
var_vm2_name = var_prefix_name + "-" + var_vm2_name
#
var_vm2_mem_size    = params['node2']['mem_size']
var_vm2_cpus        = params['node2']['cpus']
var_vm2_public_ip   = params['node2']['public_ip']
var_vm2_private_ip  = params['node2']['private_ip']
var_vm2_u01_disk    = params['node2']['u01_disk']
#                   
var_oradata_disk_path  = params['env']['oradata_disk_path']
var_oradata_disk_num   = params['env']['oradata_disk_num']
var_oradata_disk_size  = params['env']['oradata_disk_size']
#                   
var_db_software     = params['env']['db_software']
var_ora_languages   = params['env']['ora_languages']
#
var_root_password   = params['env']['root_password']
var_oracle_password = params['env']['oracle_password']
var_sys_password    = params['env']['sys_password']
var_pdb_password    = params['env']['pdb_password']
#
var_db_name         = params['env']['db_name']
var_pdb_name        = params['env']['pdb_name']
var_cdb             = params['env']['cdb']
# -----------------------------------------------------------------

# Variables check
# -----------------------------------------------------------------
if var_vm1_mem_size.to_i < 6144
  puts 'ERROR: vm1_mem_size option can not be less then 6 Gb'
  exit
end
if var_vm2_mem_size.to_i < 6144
  puts 'ERROR: vm2_mem_size option can not be less then 6 Gb'
  exit
end

if ( (var_non_rotational != 'on') and (var_non_rotational != 'off') )
  puts 'ERROR: non_rotational option can be on or off'
  exit
end

if ( (var_cdb != true) and (var_cdb != false) )
  puts 'ERROR: cdb option can be true or false'
  exit
end

if var_oradata_disk_size.to_i < 10
  puts 'ERROR: asm_disk_size option can not be less then 10 Gb'
  exit
end

class String
  def is_ip?
    !!IPAddr.new(self) rescue false
  end
end

if ! var_vm1_public_ip.is_ip?
  puts 'ERROR: public_ip for node1 is not a valid IP address'
  exit
end
if ! var_vm1_private_ip.is_ip?
  puts 'ERROR: private_ip for node1 is not a valid IP address'
  exit
end

if ! var_vm2_public_ip.is_ip?
  puts 'ERROR: public_ip for node2 is not a valid IP address'
  exit
end
if ! var_vm2_private_ip.is_ip?
  puts 'ERROR: private_ip for node2 is not a valid IP address'
  exit
end

if ! var_dns_public_ip.is_ip?
  puts 'ERROR: dns_public_ip is not a valid IP address'
  exit
end

if var_db_name.to_s.empty?
 puts "ERROR: db_name is not defined"
 exit
end

if var_root_password.to_s.empty?
 puts "ERROR: root_password is not defined"
 exit
end
if var_oracle_password.to_s.empty?
 puts "ERROR: oracle_password is not defined"
 exit 
end
if var_sys_password.to_s.empty?
 puts "ERROR: sys_password is not defined"
 exit
end

if (var_cdb == true) 
  if var_pdb_name.to_s.empty?
   puts "ERROR: pdb_name is not defined"
   exit
  end
  if var_pdb_password.to_s.empty?
   puts "ERROR: pdb_password is not defined"
   exit
  end
end

path = "./ORCL_software/" + var_db_software
if ! File.exist?(path)
  puts "ERROR: db_software does not exist"
  exit
end

if var_oradata_disk_path.to_s.empty?
  var_oradata_disk_path = "./"
else
  var_oradata_disk_path = var_oradata_disk_path + "/"
end
if var_oradata_disk_num.to_i < 2
  puts 'ERROR: oradata_disk_num option can not be less then 2'
  exit
end

var_db_software_ver = (var_db_software.split("_"))[1].to_i
#------------------------------------------------------------------

# Install required Vagrant plugin
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end
unless Vagrant.has_plugin?("vagrant-proxyconf")
  puts 'Installing vagrant-proxyconf Plugin...'
  system('vagrant plugin install vagrant-proxyconf')
end
#unless Vagrant.has_plugin?("vagrant-vbguest")
#  puts 'Installing vagrant-vbguest Plugin...'
#  system('vagrant plugin install vagrant-vbguest')
#end

# Get host time zone for setting VM time zone
offset_sec = Time.now.gmt_offset
if (offset_sec % (60 * 60)) == 0
  offset_hr = ((offset_sec / 60) / 60)
  timezone_suffix = offset_hr >= 0 ? "-#{offset_hr.to_s}" : "+#{(-offset_hr).to_s}"
  var_system_timezone = 'Etc/GMT' + timezone_suffix
else
  # if host time zone isn't an integer hour offset, fall back to UTC
  var_system_timezone = 'UTC'
end

# VMs definition
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = var_box
  config.vm.box_url = var_url

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # add proxy configuration from host env - optional
  if Vagrant.has_plugin?("vagrant-proxyconf")
    puts "getting Proxy Configuration from Host..."
    if ENV["http_proxy"]
      puts "http_proxy: " + ENV["http_proxy"]
      config.proxy.http     = ENV["http_proxy"]
    end
    if ENV["https_proxy"]
      puts "https_proxy: " + ENV["https_proxy"]
      config.proxy.https    = ENV["https_proxy"]
    end
    if ENV["no_proxy"]
      config.proxy.no_proxy = ENV["no_proxy"]
    end
  end

  # Share an additional folder to the guest VM. 
  # The first argument is the path on the host to the actual folder.
  # The second argument is the path on the guest to mount the folder. 
  # And the optional third argument is a set of non-required options.
  config.vm.synced_folder "config/",      "/vagrant_config"
  config.vm.synced_folder "userscripts/", "/vagrant_userscripts"
  config.vm.synced_folder "scripts/",     "/vagrant_scripts"

  config.ssh.forward_x11 = true

  # vm node1
  config.vm.define :node1 do |node1|
    node1.vm.hostname = var_vm1_name
    node1.vm.network :private_network, ip: var_vm1_public_ip, virtualbox__hostonly: "vboxnet0"
    node1.vm.network :private_network, ip: var_vm1_private_ip, virtualbox__intnet: "private"
    node1.vm.provider :virtualbox do |vb|
      vb.name   = var_vm1_name
      vb.memory = var_vm1_mem_size
      vb.cpus   = var_vm1_cpus
      vb.customize ["modifyvm", :id, "--groups", var_group] unless var_group.nil?

      # Attach default guest vdisks
      disk_num = 0
      while disk_num < box_disks_num do
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--nonrotational', var_non_rotational]
        disk_num += 1
      end

      # Make u01 vdisk
      unless File.exist?(var_vm1_u01_disk)
        vb.customize ['createhd', '--filename', var_vm1_u01_disk, '--size', 100 * 1024]
      end
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', var_vm1_u01_disk, '--nonrotational', var_non_rotational]

      # Making oradata disks
      disk_num = disk_num.to_i + 1
      num = 0
      while num < var_oradata_disk_num do 
        oradata_disk = var_oradata_disk_path + "primary_oradata_disk" + num.to_s + ".vdi"
        # Making oradata disks
        unless File.exist?(oradata_disk)
          vb.customize ['createhd', '--filename', oradata_disk, '--size', var_oradata_disk_size * 1024, '--format', 'VDI']
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', oradata_disk, '--nonrotational', var_non_rotational]
         disk_num += 1
         num += 1
      end
    end
  end

  # vm node2
  config.vm.define :node2 do |node2|
    node2.vm.hostname = var_vm2_name
    node2.vm.network :private_network, ip: var_vm2_public_ip, virtualbox__hostonly: "vboxnet0"
    node2.vm.network :private_network, ip: var_vm2_private_ip, virtualbox__intnet: "private"
    node2.vm.provider :virtualbox do |vb|
      vb.name   = var_vm2_name
      vb.memory = var_vm2_mem_size
      vb.cpus   = var_vm2_cpus
      vb.customize ["modifyvm", :id, "--groups", var_group] unless var_group.nil?

      # Attach default guest vdisks
      disk_num = 0
      while disk_num < box_disks_num  do
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--nonrotational', var_non_rotational]
        disk_num += 1
      end

      # Make u01 vdisk
      unless File.exist?(var_vm2_u01_disk)
        vb.customize ['createhd', '--filename', var_vm2_u01_disk, '--size', 100 * 1024]
      end
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', var_vm2_u01_disk, '--nonrotational', var_non_rotational]

      # Making oradata disks
      disk_num = disk_num.to_i + 1
      num = 0
      while num < var_oradata_disk_num do 
        oradata_disk = var_oradata_disk_path + "standby_oradata_disk" + num.to_s + ".vdi"
        # Making oradata disks
        unless File.exist?(oradata_disk)
          vb.customize ['createhd', '--filename', oradata_disk, '--size', var_oradata_disk_size * 1024, '--format', 'VDI']
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', disk_num, '--device', 0, '--type', 'hdd', '--medium', oradata_disk, '--nonrotational', var_non_rotational]
         disk_num += 1
         num += 1
      end
    end
  end

  # Enable ssh password authentication
  config.vm.provision "shell", inline: <<-SHELL
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config    
    /bin/systemctl restart sshd
  SHELL

  # Enable provisioning with a shell script
  config.vm.provision "shell", path: "scripts/setup.sh", env: {
      "BOX_DISK_NUM"     => box_disks_num,
      "VM1_NAME"         => var_vm1_name,
      "VM2_NAME"         => var_vm2_name,
      "SYSTEM_TIMEZONE"  => var_system_timezone,
      "PREFIX_NAME"      => var_prefix_name,
      "DB_SOFTWARE"      => var_db_software,
      "DB_SOFTWARE_VER"  => var_db_software_ver,
      "ORA_LANGUAGES"    => var_ora_languages,
      "NODE1_PUBLIC_IP"  => var_vm1_public_ip,
      "NODE2_PUBLIC_IP"  => var_vm2_public_ip,
      "NODE1_PRIV_IP"    => var_vm1_private_ip,
      "NODE2_PRIV_IP"    => var_vm2_private_ip,
      "DNS_PUBLIC_IP"    => var_dns_public_ip,
      "ROOT_PASSWORD"    => var_root_password,
      "ORACLE_PASSWORD"  => var_oracle_password,
      "SYS_PASSWORD"     => var_sys_password,
      "PDB_PASSWORD"     => var_pdb_password,
      "DB_NAME"          => var_db_name,
      "PDB_NAME"         => var_pdb_name,
      "CDB"              => var_cdb
  }
end
#----------------------------------------------------------
# EndOfFile
#----------------------------------------------------------

